{"remainingRequest":"/Users/haojianie/Desktop/Web/rppg/node_modules/babel-loader/lib/index.js!/Users/haojianie/Desktop/Web/rppg/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/haojianie/Desktop/Web/rppg/src/components/sketch.js","dependencies":[{"path":"/Users/haojianie/Desktop/Web/rppg/src/components/sketch.js","mtime":1597356893688},{"path":"/Users/haojianie/Desktop/Web/rppg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/haojianie/Desktop/Web/rppg/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/haojianie/Desktop/Web/rppg/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL2hhb2ppYW5pZS9EZXNrdG9wL1dlYi9ycHBnL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICogYXMgdmlzIGZyb20gJ3Zpcy10aW1lbGluZS9zdGFuZGFsb25lJzsKaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcyc7IC8vaW1wb3J0ICogYXMgdGZuIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtbm9kZSc7CgpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBydW4oKSB7CiAgdmFyIHZpZGVvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvJyk7CiAgdmFyIG9yaWdfdiwgWHN1YiwgZFhzdWIsIHByZXZGcmFtZTsKICB2YXIgZGlmZkJhdGNoLCBCYXRjaDsKICB2YXIgZGVsYXkgPSAzMDsKICB2YXIgYmF0Y2hfc2l6ZSA9IDIwOwogIHZhciBiYXRjaF9jb3VudGVyID0gMDsKICB2YXIgZGltID0gMzY7CiAgdmFyIHByZWRpY3Rpb247CiAgdmFyIG1vZGVsOyAvL2NvbnN0IGhhbmRsZXIgPSB0Zm4uaW8uZmlsZVN5c3RlbSgiLi9tb2RlbC5qc29uIik7CgogIHZhciBwYXRoID0gIi4vbW9kZWwuanNvbiI7IC8vcHJvY2Vzc01vZGVsKCk7CgogIGxvYWRNb2RlbCgpOwoKICBmdW5jdGlvbiBsb2FkTW9kZWwoKSB7CiAgICByZXR1cm4gX2xvYWRNb2RlbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgZnVuY3Rpb24gX2xvYWRNb2RlbCgpIHsKICAgIF9sb2FkTW9kZWwgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gdGYubG9hZExheWVyc01vZGVsKHBhdGgpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIG1vZGVsID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSk7CiAgICByZXR1cm4gX2xvYWRNb2RlbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgZnVuY3Rpb24gcHJvY2Vzc01vZGVsKCkgewogICAgcmV0dXJuIF9wcm9jZXNzTW9kZWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9IC8vcHJvY2Vzc01vZGVsKCk7CiAgLy9jb25zdCBtb2RlbCA9IHRmLmxvYWRMYXllcnNNb2RlbChwYXRoKTsKICAvL2NvbnN0IG1vZGVsID0gYXdhaXQgdGYubG9hZExheWVyc01vZGVsKHBhdGgpOwogIC8vY29uc3QgbW9kZWwgPSB0Zi5sb2FkTGF5ZXJzTW9kZWwoJy4vbW9kZWwuanNvbicpOwoKCiAgZnVuY3Rpb24gX3Byb2Nlc3NNb2RlbCgpIHsKICAgIF9wcm9jZXNzTW9kZWwgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICB2YXIgcmVzdWx0OwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gdGYubG9hZExheWVyc01vZGVsKHBhdGgpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIG1vZGVsID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgLy8JbW9kZWwgPSBhd2FpdCB0Zi5sb2FkTGF5ZXJzTW9kZWwocGF0aCk7CiAgICAgICAgICAgICAgcmVzdWx0ID0gbW9kZWwucHJlZGljdChkaWZmQmF0Y2gsIEJhdGNoKTsKICAgICAgICAgICAgICBwcmVkaWN0aW9uID0gcmVzdWx0OwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTMpOwogICAgfSkpOwogICAgcmV0dXJuIF9wcm9jZXNzTW9kZWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIHZhciBuYW1lcyA9IFsidW5pZm9ybSJdOwogIHZhciBncm91cHMgPSBuZXcgdmlzLkRhdGFTZXQoKTsKICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInZpc3VhbGl6YXRpb24iKTsKICB2YXIgZGF0YXNldCA9IG5ldyB2aXMuRGF0YVNldCgpOwogIHZhciBub3cgPSB2aXMubW9tZW50KCk7IC8vCXZhciBkZWxheSA9IDEwMDsKCiAgdmFyIG9wdGlvbnMgPSB7CiAgICBkcmF3UG9pbnRzOiBmYWxzZSwKICAgIGRhdGFBeGlzOiB7CiAgICAgIHZpc2libGU6IHRydWUsCiAgICAgIGxlZnQ6IHsKICAgICAgICB0aXRsZTogewogICAgICAgICAgdGV4dDogIk5vcm1hbGl6ZWQgQW1wbGl0dWRlIgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGxlZ2VuZDogZmFsc2UsCiAgICBzdGFydDogdmlzLm1vbWVudCgpLmFkZCgtNSwgInNlY29uZHMiKSwKICAgIC8vIGRpc3BsYXkgc3RhcnQsICBlbmQKICAgIGVuZDogdmlzLm1vbWVudCgpLmFkZCgxMCwgInNlY29uZHMiKQogIH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQoKICB2YXIgZ3JhcGgyZCA9IG5ldyB2aXMuR3JhcGgyZChjb250YWluZXIsIGRhdGFzZXQsIGdyb3Vwcywgb3B0aW9ucyk7IC8vIGNvdWxkIGRlbGV0ZSB0aGUgZ3JvdXAgLCBqdXN0IHVzZSBkYXRhc2V0CgogIGdyb3Vwcy5hZGQoewogICAgaWQ6IDAsCiAgICBjb250ZW50OiBuYW1lc1swXSwKICAgIG9wdGlvbnM6IHsKICAgICAgZHJhd1BvaW50czogZmFsc2UsCiAgICAgIGludGVycG9sYXRpb246IHsKICAgICAgICBwYXJhbWV0cml6YXRpb246ICJ1bmlmb3JtIgogICAgICB9CiAgICB9CiAgfSk7CiAgc3RhcnRWaWRlbygpOyAvL2luaXRpYWxpemVfY2hhcnQoKTsKCiAgZnVuY3Rpb24gbG9vcCgpIHsKICAgIHByZXByb2Nlc3MoKTsgLy8JcmVzdWx0ID0KICAgIC8vcnBwZyhzYW1wbGUpOwoKICAgIHNldFRpbWVvdXQobG9vcCwgZGVsYXkpOwogIH0KCiAgZnVuY3Rpb24gcHJlcHJvY2VzcygpIHsKICAgIG9yaWdfdiA9IHRmLmJyb3dzZXIuZnJvbVBpeGVscyh2aWRlbyk7CiAgICBvcmlnX3YucHJpbnQodHJ1ZSk7CiAgICBYc3ViID0gdGYuaW1hZ2UucmVzaXplQmlsaW5lYXIob3JpZ192LCBbZGltLCBkaW1dKTsKICAgIFhzdWIucHJpbnQodHJ1ZSk7CiAgICBYc3ViID0gWHN1Yi5hc1R5cGUoJ2Zsb2F0MzInKS5kaXYodGYuc2NhbGFyKDI1NSkpOwogICAgWHN1YiA9IFhzdWIuZXhwYW5kRGltcygwKTsgLy8gKDEsIDM2LCAzNiwgMykKCiAgICBYc3ViLnByaW50KHRydWUpOwoKICAgIGlmIChwcmV2RnJhbWUgPT0gbnVsbCkgewogICAgICBwcmV2RnJhbWUgPSBYc3ViOwogICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovCgogICAgICBjb25zb2xlLmxvZygiaW5pdGlhbGl6ZSIpOyAvL2JhdGNoX2NvdW50ZXIrKzsKICAgICAgLy9CYXRjaCA9IFhzdWI7CiAgICAgIC8vY3VtU3VtID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgLy8gZGlkbid0IGdldCAgb25seSB0aGUgMzAwLCAzMDAgLCBpZSBkaWRuJ3QgY3JvcAkJCiAgICAgIC8vIEZSQU1FIERJRkY6CiAgICAgIGRYc3ViID0gdGYuZGl2KHRmLnN1YihYc3ViLCBwcmV2RnJhbWUpLCB0Zi5hZGQoWHN1YiwgcHJldkZyYW1lKSk7IC8vIFNVQlRSQUNUIE1FQU4gT0YgSU1HOgoKICAgICAgZFhzdWIgPSB0Zi5kaXYoZFhzdWIsIHRmLm1vbWVudHMoZFhzdWIpLnZhcmlhbmNlLnNxcnQoKSk7IC8vICgxLCAzNiwgMzYsIDMpCgogICAgICBYc3ViID0gdGYuc3ViKFhzdWIsIHRmLm1lYW4oWHN1YikpOwogICAgICBYc3ViID0gdGYuZGl2KFhzdWIsIHRmLm1vbWVudHMoWHN1YikudmFyaWFuY2Uuc3FydCgpKTsgLy8gKDEsIDM2LCAzNiwgMykKCiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi8KCiAgICAgIGNvbnNvbGUubG9nKCJiZWxvdyBpcyBYIGJlZm9yZSBtZWFuIik7CiAgICAgIGNvbnNvbGUubG9nKFhzdWIucHJpbnQodHJ1ZSkpOyAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgIC8vIGdldCBhdmVyYWdlIGZyYW1lIGhlcmUgCiAgICAgIC8vWHN1YiA9IHRmLm1lYW4oWHN1YiwgMCk7IC8vICgxLCAzNiwgMzYsIDMpCgogICAgICBwcmV2RnJhbWUgPSBYc3ViOwoKICAgICAgaWYgKGJhdGNoX2NvdW50ZXIgPT0gMCkgewogICAgICAgIEJhdGNoID0gdGYuY2FzdChYc3ViLCAnZmxvYXQzMicpOwogICAgICAgIGRpZmZCYXRjaCA9IGRYc3ViOwogICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi8KCiAgICAgICAgY29uc29sZS5sb2coImJlbG93IGlzIGJhdGNoIik7CiAgICAgICAgY29uc29sZS5sb2coQmF0Y2gucHJpbnQodHJ1ZSkpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vQmF0Y2ggPSB0Zi5leHBhbmREaW1zKEJhdGNoLCAwKTsKICAgICAgICAvL1hzdWIgPSB0Zi5leHBhbmREaW1zKFhzdWIsIDApOwoKICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovCiAgICAgICAgY29uc29sZS5sb2coIlggaW4gc3RhY2siKTsKICAgICAgICBjb25zb2xlLmxvZyhYc3ViLnByaW50KHRydWUpKTsKICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovCgogICAgICAgIGNvbnNvbGUubG9nKCJiYXRjaCBpbiBzdGFjayIpOwogICAgICAgIGNvbnNvbGUubG9nKEJhdGNoLnByaW50KHRydWUpKTsKICAgICAgICBCYXRjaCA9IHRmLmNvbmNhdChbQmF0Y2gsIFhzdWJdKTsgLy8gbm90ZSB0aGUgeHN1YiBoZXJlIGlzIGFmdGVyIAoKICAgICAgICBkaWZmQmF0Y2ggPSB0Zi5jb25jYXQoW2RpZmZCYXRjaCwgZFhzdWJdKTsKICAgICAgfQoKICAgICAgYmF0Y2hfY291bnRlcisrOwogICAgfQoKICAgIGlmIChiYXRjaF9jb3VudGVyID09IGJhdGNoX3NpemUpIHsKICAgICAgLy8gY2FsbCB1cGRhdGUgdGhlIGNoYXJ0CiAgICAgIEJhdGNoID0gdGYudHJhbnNwb3NlKEJhdGNoLCBbMiwgMSwgMywgMF0pOyAvLyBzd2FwIGF4aXMKCiAgICAgIEJhdGNoID0gdGYuZXhwYW5kRGltcyhCYXRjaCwgMCk7IC8vIGV4cGFuZCBkaW1lbnNpb24KCiAgICAgIGRpZmZCYXRjaCA9IHRmLnRyYW5zcG9zZShkaWZmQmF0Y2gsIFsyLCAxLCAzLCAwXSk7IC8vIHN3YXAgYXhpcwoKICAgICAgZGlmZkJhdGNoID0gdGYuZXhwYW5kRGltcyhkaWZmQmF0Y2gsIDApOyAvLyBleHBhbmQgZGltZW5zaW9uCgogICAgICBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc01vZGVsKCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKCiAgICAgIGFkZERhdGFQb2ludCgpOyAvLyBpbml0aWFsaXphdGlvbiBmb3IgdGhlIG5leHQgaXRlcmF0aW9uCgogICAgICBCYXRjaCA9IG51bGw7CiAgICAgIGRpZmZCYXRjaCA9IG51bGw7CiAgICAgIHByZXZGcmFtZSA9IG51bGw7CiAgICAgIGJhdGNoX2NvdW50ZXIgPSAwOwogICAgfQogIH0KCiAgZnVuY3Rpb24gc3RhcnRWaWRlbygpIHsKICAgIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB7CiAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHsKICAgICAgICB2aWRlbzogdHJ1ZQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChzdHJlYW0pIHsKICAgICAgICB2aWRlby5zcmNPYmplY3QgPSBzdHJlYW07CiAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigibG9hZGVkbWV0YWRhdGEiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyB1c2VkIHRvIGhhdmUgYW4gZSBoZXJlCiAgICAgICAgICB2aWRlby5wbGF5KCk7CiAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovCgogICAgICAgICAgY29uc29sZS5sb2coIldlYmNhbSB2aWRlbyBzdWNjZXNzZnVsbHkgbG9hZGVkIik7CiAgICAgICAgICBsb29wKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0gLy8gdGhlIGNoYXJ0CgoKICBmdW5jdGlvbiBhZGREYXRhUG9pbnQoKSB7CiAgICB2YXIgbm93ID0gdmlzLm1vbWVudCgpOyAvL3ZhciB5VmFsID0gMSArIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwKTsKCiAgICBjb25zb2xlLmxvZygiaW5zaWRlIHByZWRpY3Rpb24iKTsKICAgIGNvbnNvbGUubG9nKHByZWRpY3Rpb24pOwogICAgZGF0YXNldC5hZGQoW3sKICAgICAgeDogbm93LAogICAgICB5OiBwcmVkaWN0aW9uLAogICAgICBncm91cDogMAogICAgfV0pOwogICAgc2V0VGltZW91dChtb3ZlV2luZG93LCBkZWxheSk7CiAgfQoKICBmdW5jdGlvbiBtb3ZlV2luZG93KCkgewogICAgdmFyIHN0cmF0ZWd5ID0gJ3N0YXRpYyc7CiAgICB2YXIgcmFuZ2UgPSBncmFwaDJkLmdldFdpbmRvdygpOwogICAgbm93ID0gdmlzLm1vbWVudCgpOwogICAgdmFyIGludGVydmFsID0gcmFuZ2UuZW5kIC0gcmFuZ2Uuc3RhcnQ7CgogICAgaWYgKG5vdyA+IHJhbmdlLmVuZCkgewogICAgICBncmFwaDJkLnNldFdpbmRvdyhub3cgLSAwLjEgKiBpbnRlcnZhbCwgbm93ICsgMC45ICogaW50ZXJ2YWwpOwogICAgfQoKICAgIHN3aXRjaCAoc3RyYXRlZ3kpIHsKICAgICAgZGVmYXVsdDoKICAgICAgICAvLyAnc3RhdGljJwogICAgICAgIC8vIG1vdmUgdGhlIHdpbmRvdyA5MCUgdG8gdGhlIGxlZnQgd2hlbiBub3cgaXMgbGFyZ2VyIHRoYW4gdGhlIGVuZCBvZiB0aGUgd2luZG93CiAgICAgICAgaWYgKHJhbmdlID4gMTApIHsKICAgICAgICAgIC8vCQljb25zb2xlLmxvZygibW92ZSB3aW5kb3ciKTsKICAgICAgICAgIGdyYXBoMmQuc2V0V2luZG93KG5vdyAtIDAuMSAqIGludGVydmFsLCBub3cgKyAwLjkgKiBpbnRlcnZhbCk7CiAgICAgICAgfQoKICAgICAgICBzZXRUaW1lb3V0KG1vdmVXaW5kb3csIGRlbGF5KTsKICAgICAgICBicmVhazsKICAgIH0KICB9Cn0KLyp2YXIgbmFtZXMsIGdyb3VwcywgY29udGFpbmVyLCBkYXRhc2V0LCBub3csIG9wdGlvbnMsIGdyYXBoMmQ7DQoNCmZ1bmN0aW9uIGluaXRpYWxpemVfY2hhcnQoKSB7DQoJdmFyIG5hbWVzID0gWyJ1bmlmb3JtIl07DQoJdmFyIGdyb3VwcyA9IG5ldyB2aXMuRGF0YVNldCgpOw0KCXZhciBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidmlzdWFsaXphdGlvbiIpOw0KCXZhciBkYXRhc2V0ID0gbmV3IHZpcy5EYXRhU2V0KCk7DQoJdmFyIG5vdyA9IHZpcy5tb21lbnQoKTsNCgkvLwl2YXIgZGVsYXkgPSAxMDA7DQoNCgl2YXIgb3B0aW9ucyA9IHsNCgkJZHJhd1BvaW50czogZmFsc2UsDQoJCWRhdGFBeGlzOiB7DQoJCQl2aXNpYmxlOiB0cnVlLA0KCQkJbGVmdDogew0KCQkJCXRpdGxlOiB7DQoJCQkJCXRleHQ6ICJOb3JtYWxpemVkIEFtcGxpdHVkZSIsDQoJCQkJfQ0KCQkJfQ0KCQl9LA0KCQlsZWdlbmQ6IGZhbHNlLA0KCQlzdGFydDogdmlzLm1vbWVudCgpLmFkZCgtNSwgInNlY29uZHMiKSwgLy8gZGlzcGxheSBzdGFydCwgIGVuZA0KCQllbmQ6IHZpcy5tb21lbnQoKS5hZGQoMTAsICJzZWNvbmRzIiksDQoNCgl9Ow0KDQoJLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lDQoJdmFyIGdyYXBoMmQgPSBuZXcgdmlzLkdyYXBoMmQoY29udGFpbmVyLCBkYXRhc2V0LCBncm91cHMsIG9wdGlvbnMpOw0KDQoJLy8gY291bGQgZGVsZXRlIHRoZSBncm91cCAsIGp1c3QgdXNlIGRhdGFzZXQNCglncm91cHMuYWRkKHsNCgkJaWQ6IDAsDQoJCWNvbnRlbnQ6IG5hbWVzWzBdLA0KCQlvcHRpb25zOiB7DQoJCQlkcmF3UG9pbnRzOiBmYWxzZSwNCgkJCWludGVycG9sYXRpb246IHsNCgkJCQlwYXJhbWV0cml6YXRpb246ICJ1bmlmb3JtIiwNCgkJCX0sDQoJCX0sDQoJfSk7DQp9Ki8KLy9pbXBvcnQgKiBhcyBjdiBmcm9tICdvcGVuY3YnCgovKmNvbnN0IGN2ID0gcmVxdWlyZSgnb3BlbmN2NG5vZGVqcycpOw0KDQoNCg0KY3ZbJ29uUnVudGltZUluaXRpYWxpemVkJ109KCk9PnsNCiAgICAgICAgICBsZXQgbWF0ID0gbmV3IGN2Lk1hdCgpOw0KICAgICAgICAgIGNvbnNvbGUubG9nKG1hdC5zaXplKCkpOw0KICAgICAgICAgIG1hdC5kZWxldGUoKTsNCn07DQoJY3ZbJ29uUnVudGltZUluaXRpYWxpemVkJ10gPSAoKSA9PiB7DQoJCXZhciBzdGFydFRpbWUgPSBEYXRlLm5vdygpOw0KCQkvL3ZhciBkaW0gPSAzNjsNCgkJbGV0IHNyYyA9IG5ldyBjdi5NYXQodmlkZW8uaGVpZ2h0LCB2aWRlby53aWR0aCwgY3YuQ1ZfMzJGQzMpOw0KCQlsZXQgZHN0ID0gbmV3IGN2Lk1hdCh2aWRlby5oZWlnaHQsIHZpZGVvLndpZHRoLCBjdi5DVl8zMkZDMyk7DQoJCWxldCBjYXAgPSBuZXcgY3YuVmlkZW9DYXB0dXJlKHZpZGVvKTsNCgkJLy9sZXQgemVyb01hdCA9IG5ldyBjdi5NYXQuemVyb3MoZGltLCBkaW0sIGN2LkNWXzMyRkMzKTsNCg0KCQljYXAucmVhZChzcmMpOyAvLyBzcmMgc3RvcmVzIHRoZSBjdXJyZW50IGZyYW1lICwgc2hhcGUoNDgwLCA2NDAsIDModHlwZS0+ZmxvYXQpKQ0KDQoJCWxldCByZWN0ID0gbmV3IGN2LlJlY3QoMTYwLCA5MCwgMzAwLCAzMDApOw0KCQlkc3QgPSBzcmMucm9pKHJlY3QpOyAvLyBjcm9wcGVkIGRhdGEgaGVyZQ0KCQljb25zb2xlLmxvZyhkc3Qucm93cyk7DQoJCQ0KCQl3aGlsZSBzdWNjZXNzOg0KCQkgICAgICB0LmFwcGVuZCh2aWRPYmouZ2V0KGN2Mi5DQVBfUFJPUF9QT1NfTVNFQykpIyBjdXJyZW50IHRpbWVzdGFtcCBpbiBtaWxpc2Vjb25kIA0KCQkgICAgICB2aWRMeEwgPSBjdjIucmVzaXplKGltZ19hc19mbG9hdChpbWdbOiwgaW50KHdpZHRoLzIpIC0gaW50KGhlaWdodC8yICsgMSkgOiBpbnQoaGVpZ2h0LzIpICsgaW50KHdpZHRoLzIpLCA6XSksIChMLCBMKSkNCgkJICAgICAgcGx0Lmltc2hvdyhjdjIucm90YXRlKHZpZEx4TCwgY3YyLlJPVEFURV85MF9DTE9DS1dJU0UpKQ0KCQkgICAgICB2aWRMeExbdmlkTHhMID4gMV0gPSAxDQoJCSAgICAgIHZpZEx4TFt2aWRMeEwgPCAoMS8yNTUpXSA9IDEvMjU1DQoJCSAgICAgIFhzdWJbaSwgOiwgOiwgOl0gPSB2aWRMeEwNCgkJICAgICAgc3VjY2VzcywgaW1nID0gdmlkT2JqLnJlYWQoKSAjIHJlYWQgdGhlIG5leHQgb25lDQoJCSAgICAgIGkgPSBpICsgMQ0KCQkNCg0KDQoJCWNvbnN0IEZQUyA9IDMwOw0KDQoJCXByZXByb2Nlc3MoKTsNCgkJY29uc29sZS5sb2coImhhcHB5IikNCgkJbGV0IGVuZFRpbWUgPSBEYXRlLm5vdygpOw0KCQljb25zb2xlKGVuZFRpbWUgLSBzdGFydFRpbWUpOw0KDQoJCWZ1bmN0aW9uIHByZXByb2Nlc3MoKSB7DQoJCQl0cnkgew0KCQkJCS8vaWYgKCFzdHJlYW1pbmcpIHsNCgkJCQkvLyBjbGVhbiBhbmQgc3RvcC4NCgkJCQkvLwkJc3JjLmRlbGV0ZSgpOw0KCQkJCS8vCQlkc3QuZGVsZXRlKCk7DQoJCQkJLy8JCXJldHVybjsNCgkJCQkvLwl9DQoNCgkJCQlsZXQgYmVnaW4gPSBEYXRlLm5vdygpOw0KCQkJCS8vIHN0YXJ0IHByb2Nlc3NpbmcuDQoJCQkJLy8JbGV0IHZpZEx4TCA9IGN2Mi5yZXNpemUoc3JjLCBkc3QsICkNCg0KDQoJCQkJY3YuY3Z0Q29sb3Ioc3JjLCBkc3QsIGN2LkNPTE9SX1JHQkEyR1JBWSk7DQoJCQkJY3YuaW1zaG93KCdjYW52YXNPdXRwdXQnLCBkc3QpOw0KCQkJCS8vIHNjaGVkdWxlIHRoZSBuZXh0IG9uZS4NCgkJCQlsZXQgZGVsYXkgPSAxMDAwIC8gRlBTIC0gKERhdGUubm93KCkgLSBiZWdpbik7DQoJCQkJc2V0VGltZW91dChwcmVwcm9jZXNzLCBkZWxheSk7DQoJCQl9IGNhdGNoIChlcnIpIHsNCgkJCQkvL3V0aWxzLnByaW50RXJyb3IoZXJyKTsNCgkJCX0NCgkJfQ0KCQlzcmMuZGVsZXRlKCk7DQoJCWRzdC5kZWxldGUoKTsNCgkJY2FwLmRlbGV0ZSgpOw0KCQlyZWN0LmRlbGV0ZSgpOw0KDQoJfTsNCiov"},{"version":3,"sources":["/Users/haojianie/Desktop/Web/rppg/src/components/sketch.js"],"names":["vis","tf","run","video","document","getElementById","orig_v","Xsub","dXsub","prevFrame","diffBatch","Batch","delay","batch_size","batch_counter","dim","prediction","model","path","loadModel","loadLayersModel","processModel","result","predict","names","groups","DataSet","container","dataset","now","moment","options","drawPoints","dataAxis","visible","left","title","text","legend","start","add","end","graph2d","Graph2d","id","content","interpolation","parametrization","startVideo","loop","preprocess","setTimeout","browser","fromPixels","print","image","resizeBilinear","asType","div","scalar","expandDims","console","log","sub","moments","variance","sqrt","mean","cast","concat","transpose","addDataPoint","navigator","mediaDevices","getUserMedia","then","stream","srcObject","addEventListener","play","x","y","group","moveWindow","strategy","range","getWindow","interval","setWindow"],"mappings":"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","sourcesContent":["import * as vis from 'vis-timeline/standalone';\r\nimport * as tf from '@tensorflow/tfjs';\n//import * as tfn from '@tensorflow/tfjs-node';\r\n\r\nexport default function run() {\r\n\r\n\tlet video = document.getElementById('video');\r\n\tvar orig_v, Xsub, dXsub, prevFrame;\r\n\tvar diffBatch, Batch;\r\n\tvar delay = 30;\r\n\tvar batch_size = 20;\r\n\tvar batch_counter = 0;\r\n\tvar dim = 36;\r\n\tvar prediction;\r\n\tlet model;\r\n\r\n\t//const handler = tfn.io.fileSystem(\"./model.json\");\r\n\tvar path = \"./model.json\";\r\n\r\n\t//processModel();\r\n\n\tloadModel();\n\tasync function loadModel() {\n\t\t//const handler = tfn.io.fileSystem(\"./model.json\");\n\t\tmodel = await tf.loadLayersModel(path);\n\n\t}\r\n\tasync function processModel() {\n\t\t//const handler = tfn.io.fileSystem(\"./model.json\");\n\t\tmodel = await tf.loadLayersModel(path);\r\n\t//\tmodel = await tf.loadLayersModel(path);\r\n\t\tvar result = model.predict(diffBatch, Batch);\r\n\t\tprediction = result;\r\n\t}\r\n\t//processModel();\r\n\r\n\t//const model = tf.loadLayersModel(path);\r\n\r\n\r\n\t//const model = await tf.loadLayersModel(path);\r\n\r\n\t//const model = tf.loadLayersModel('./model.json');\r\n\r\n\tvar names = [\"uniform\"];\r\n\tvar groups = new vis.DataSet();\r\n\tvar container = document.getElementById(\"visualization\");\r\n\tvar dataset = new vis.DataSet();\r\n\tvar now = vis.moment();\r\n\t//\tvar delay = 100;\r\n\r\n\tvar options = {\r\n\t\tdrawPoints: false,\r\n\t\tdataAxis: {\r\n\t\t\tvisible: true,\r\n\t\t\tleft: {\r\n\t\t\t\ttitle: {\r\n\t\t\t\t\ttext: \"Normalized Amplitude\",\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tlegend: false,\r\n\t\tstart: vis.moment().add(-5, \"seconds\"), // display start,  end\r\n\t\tend: vis.moment().add(10, \"seconds\"),\r\n\r\n\t};\r\n\r\n\t// eslint-disable-next-line\r\n\tvar graph2d = new vis.Graph2d(container, dataset, groups, options);\r\n\r\n\t// could delete the group , just use dataset\r\n\tgroups.add({\r\n\t\tid: 0,\r\n\t\tcontent: names[0],\r\n\t\toptions: {\r\n\t\t\tdrawPoints: false,\r\n\t\t\tinterpolation: {\r\n\t\t\t\tparametrization: \"uniform\",\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n\r\n\r\n\tstartVideo();\r\n\t//initialize_chart();\r\n\r\n\tfunction loop() {\r\n\t\tpreprocess();\r\n\t\t//\tresult =\r\n\t\t//rppg(sample);\r\n\t\tsetTimeout(loop, delay);\r\n\t}\r\n\r\n\tfunction preprocess() {\r\n\t\torig_v = tf.browser.fromPixels(video);\r\n\t\torig_v.print(true);\r\n\r\n\t\tXsub = tf.image.resizeBilinear(orig_v, [dim, dim]);\r\n\t\tXsub.print(true);\r\n\r\n\t\tXsub = Xsub.asType('float32').div(tf.scalar(255));\r\n\t\tXsub = Xsub.expandDims(0); // (1, 36, 36, 3)\r\n\t\tXsub.print(true);\r\n\r\n\r\n\t\tif (prevFrame == null) {\r\n\t\t\tprevFrame = Xsub;\r\n\t\t\t/* eslint-disable no-console */\r\n\t\t\tconsole.log(\"initialize\")\r\n\t\t\t//batch_counter++;\r\n\t\t\t//Batch = Xsub;\r\n\t\t\t//cumSum = 0;\r\n\t\t} else {\r\n\t\t\t//--------------------------------------\r\n\t\t\t// didn't get  only the 300, 300 , ie didn't crop\t\t\r\n\r\n\t\t\t// FRAME DIFF:\r\n\t\t\tdXsub = tf.div(tf.sub(Xsub, prevFrame), tf.add(Xsub, prevFrame));\r\n\r\n\t\t\t// SUBTRACT MEAN OF IMG:\r\n\t\t\tdXsub = tf.div(dXsub, tf.moments(dXsub).variance.sqrt()); // (1, 36, 36, 3)\r\n\t\t\tXsub = tf.sub(Xsub, tf.mean(Xsub));\r\n\t\t\tXsub = tf.div(Xsub, tf.moments(Xsub).variance.sqrt()); // (1, 36, 36, 3)\r\n\t\t\t/* eslint-disable no-console */\r\n\t\t\tconsole.log(\"below is X before mean\")\r\n\t\t\tconsole.log(Xsub.print(true));\r\n\r\n\t\t\t// -------------------------------------\r\n\t\t\t// get average frame here \r\n\t\t\t//Xsub = tf.mean(Xsub, 0); // (1, 36, 36, 3)\r\n\t\t\tprevFrame = Xsub;\r\n\t\t\tif (batch_counter == 0) {\r\n\t\t\t\tBatch = tf.cast(Xsub, 'float32');\r\n\t\t\t\tdiffBatch = dXsub;\r\n\t\t\t\t/* eslint-disable no-console */\r\n\t\t\t\tconsole.log(\"below is batch\");\r\n\t\t\t\tconsole.log(Batch.print(true));\r\n\t\t\t} else {\r\n\r\n\t\t\t\t//Batch = tf.expandDims(Batch, 0);\r\n\t\t\t\t//Xsub = tf.expandDims(Xsub, 0);\r\n\t\t\t\t/* eslint-disable no-console */\r\n\t\t\t\tconsole.log(\"X in stack\")\r\n\t\t\t\tconsole.log(Xsub.print(true));\r\n\t\t\t\t/* eslint-disable no-console */\r\n\t\t\t\tconsole.log(\"batch in stack\")\r\n\t\t\t\tconsole.log(Batch.print(true));\r\n\r\n\t\t\t\tBatch = tf.concat([Batch, Xsub]) // note the xsub here is after \r\n\t\t\t\tdiffBatch = tf.concat([diffBatch, dXsub]);\r\n\r\n\t\t\t}\r\n\t\t\tbatch_counter++;\r\n\t\t}\r\n\r\n\t\tif (batch_counter == batch_size) {\r\n\r\n\t\t\t// call update the chart\r\n\r\n\t\t\tBatch = tf.transpose(Batch, [2, 1, 3, 0]); // swap axis\r\n\t\t\tBatch = tf.expandDims(Batch, 0); // expand dimension\r\n\r\n\t\t\tdiffBatch = tf.transpose(diffBatch, [2, 1, 3, 0]); // swap axis\r\n\t\t\tdiffBatch = tf.expandDims(diffBatch, 0); // expand dimension\r\n\r\n\t\t\t(async () => {\n\t\t\t\tawait processModel();\n\t\t\t})()\r\n\t\t\taddDataPoint();\r\n\t\t\t// initialization for the next iteration\r\n\t\t\tBatch = null;\r\n\t\t\tdiffBatch = null;\r\n\t\t\tprevFrame = null;\r\n\t\t\tbatch_counter = 0;\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tfunction startVideo() {\r\n\t\tif (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n\t\t\tnavigator.mediaDevices.getUserMedia({\r\n\t\t\t\tvideo: true\r\n\t\t\t}).then(function(stream) {\r\n\t\t\t\tvideo.srcObject = stream;\r\n\t\t\t\tvideo.addEventListener(\"loadedmetadata\", function() { // used to have an e here\r\n\t\t\t\t\tvideo.play();\r\n\t\t\t\t\t/* eslint-disable no-console */\r\n\t\t\t\t\tconsole.log(\"Webcam video successfully loaded\");\r\n\t\t\t\t\tloop();\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// the chart\r\n\tfunction addDataPoint() {\r\n\t\tvar now = vis.moment();\r\n\t\t//var yVal = 1 + Math.round(Math.random() * 10);\r\n\n\t\tconsole.log(\"inside prediction\");\n\t\tconsole.log(prediction);\r\n\t\tdataset.add([{\r\n\t\t\tx: now,\r\n\t\t\ty: prediction,\r\n\t\t\tgroup: 0\r\n\t\t}])\r\n\r\n\t\tsetTimeout(moveWindow, delay);\r\n\t}\r\n\r\n\tfunction moveWindow() {\r\n\r\n\t\tlet strategy = 'static';\r\n\t\tvar range = graph2d.getWindow();\r\n\t\tnow = vis.moment();\r\n\r\n\t\tvar interval = range.end - range.start;\r\n\r\n\t\tif (now > range.end) {\r\n\t\t\tgraph2d.setWindow(now - 0.1 * interval, now + 0.9 * interval);\r\n\t\t}\r\n\r\n\t\tswitch (strategy) {\r\n\t\t\tdefault: // 'static'\r\n\t\t\t\t// move the window 90% to the left when now is larger than the end of the window\r\n\t\t\t\tif (range > 10) {\r\n\t\t\t\t\t//\t\tconsole.log(\"move window\");\r\n\t\t\t\t\tgraph2d.setWindow(now - 0.1 * interval, now + 0.9 * interval);\r\n\t\t\t\t}\r\n\t\t\t\tsetTimeout(moveWindow, delay);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n/*var names, groups, container, dataset, now, options, graph2d;\r\n\r\nfunction initialize_chart() {\r\n\tvar names = [\"uniform\"];\r\n\tvar groups = new vis.DataSet();\r\n\tvar container = document.getElementById(\"visualization\");\r\n\tvar dataset = new vis.DataSet();\r\n\tvar now = vis.moment();\r\n\t//\tvar delay = 100;\r\n\r\n\tvar options = {\r\n\t\tdrawPoints: false,\r\n\t\tdataAxis: {\r\n\t\t\tvisible: true,\r\n\t\t\tleft: {\r\n\t\t\t\ttitle: {\r\n\t\t\t\t\ttext: \"Normalized Amplitude\",\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tlegend: false,\r\n\t\tstart: vis.moment().add(-5, \"seconds\"), // display start,  end\r\n\t\tend: vis.moment().add(10, \"seconds\"),\r\n\r\n\t};\r\n\r\n\t// eslint-disable-next-line\r\n\tvar graph2d = new vis.Graph2d(container, dataset, groups, options);\r\n\r\n\t// could delete the group , just use dataset\r\n\tgroups.add({\r\n\t\tid: 0,\r\n\t\tcontent: names[0],\r\n\t\toptions: {\r\n\t\t\tdrawPoints: false,\r\n\t\t\tinterpolation: {\r\n\t\t\t\tparametrization: \"uniform\",\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n}*/\r\n//import * as cv from 'opencv'\r\n/*const cv = require('opencv4nodejs');\r\n\r\n\r\n\r\ncv['onRuntimeInitialized']=()=>{\r\n          let mat = new cv.Mat();\r\n          console.log(mat.size());\r\n          mat.delete();\r\n};\r\n\tcv['onRuntimeInitialized'] = () => {\r\n\t\tvar startTime = Date.now();\r\n\t\t//var dim = 36;\r\n\t\tlet src = new cv.Mat(video.height, video.width, cv.CV_32FC3);\r\n\t\tlet dst = new cv.Mat(video.height, video.width, cv.CV_32FC3);\r\n\t\tlet cap = new cv.VideoCapture(video);\r\n\t\t//let zeroMat = new cv.Mat.zeros(dim, dim, cv.CV_32FC3);\r\n\r\n\t\tcap.read(src); // src stores the current frame , shape(480, 640, 3(type->float))\r\n\r\n\t\tlet rect = new cv.Rect(160, 90, 300, 300);\r\n\t\tdst = src.roi(rect); // cropped data here\r\n\t\tconsole.log(dst.rows);\r\n\t\t\r\n\t\twhile success:\r\n\t\t      t.append(vidObj.get(cv2.CAP_PROP_POS_MSEC))# current timestamp in milisecond \r\n\t\t      vidLxL = cv2.resize(img_as_float(img[:, int(width/2) - int(height/2 + 1) : int(height/2) + int(width/2), :]), (L, L))\r\n\t\t      plt.imshow(cv2.rotate(vidLxL, cv2.ROTATE_90_CLOCKWISE))\r\n\t\t      vidLxL[vidLxL > 1] = 1\r\n\t\t      vidLxL[vidLxL < (1/255)] = 1/255\r\n\t\t      Xsub[i, :, :, :] = vidLxL\r\n\t\t      success, img = vidObj.read() # read the next one\r\n\t\t      i = i + 1\r\n\t\t\r\n\r\n\r\n\t\tconst FPS = 30;\r\n\r\n\t\tpreprocess();\r\n\t\tconsole.log(\"happy\")\r\n\t\tlet endTime = Date.now();\r\n\t\tconsole(endTime - startTime);\r\n\r\n\t\tfunction preprocess() {\r\n\t\t\ttry {\r\n\t\t\t\t//if (!streaming) {\r\n\t\t\t\t// clean and stop.\r\n\t\t\t\t//\t\tsrc.delete();\r\n\t\t\t\t//\t\tdst.delete();\r\n\t\t\t\t//\t\treturn;\r\n\t\t\t\t//\t}\r\n\r\n\t\t\t\tlet begin = Date.now();\r\n\t\t\t\t// start processing.\r\n\t\t\t\t//\tlet vidLxL = cv2.resize(src, dst, )\r\n\r\n\r\n\t\t\t\tcv.cvtColor(src, dst, cv.COLOR_RGBA2GRAY);\r\n\t\t\t\tcv.imshow('canvasOutput', dst);\r\n\t\t\t\t// schedule the next one.\r\n\t\t\t\tlet delay = 1000 / FPS - (Date.now() - begin);\r\n\t\t\t\tsetTimeout(preprocess, delay);\r\n\t\t\t} catch (err) {\r\n\t\t\t\t//utils.printError(err);\r\n\t\t\t}\r\n\t\t}\r\n\t\tsrc.delete();\r\n\t\tdst.delete();\r\n\t\tcap.delete();\r\n\t\trect.delete();\r\n\r\n\t};\r\n*/\n"]}]}